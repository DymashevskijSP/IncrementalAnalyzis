// Automatically generated by the DDlog compiler.
package ddlog.analyze;
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogException;
import com.google.flatbuffers.*;
public class analyzeUpdateBuilder extends analyzeFlatBufferBuilder
{
    private java.util.Vector<Integer> commands;
    private boolean finished;
    public analyzeUpdateBuilder() {
        this.commands = new java.util.Vector<Integer>();
        this.finished = false;
    }
    public void applyUpdates(DDlogAPI hddlog)
        throws DDlogException {
        if (this.finished) {
            throw new IllegalStateException("applyUpdates() can only be invoked once for a analyzeUpdateBuilder instance.");
        }
        int[] cmds = new int[this.commands.size()];
        for(int i = 0; i < cmds.length; i++)
            cmds[i] = this.commands.get(i);
        int cmdvec = ddlog.__analyze.__Commands.create__Commands(fbbuilder, ddlog.__analyze.__Commands.createCommandsVector(fbbuilder,cmds));
        fbbuilder.finish(cmdvec);
        this.finished = true;
        hddlog.applyUpdatesFromFlatBuf(fbbuilder.dataBuffer());
    }
    public void insert_Edge(java.math.BigInteger from, java.math.BigInteger to)
    {
        int cmd = ddlog.__analyze.__Command.create__Command(fbbuilder, (byte)0, 1, 0, ddlog.__analyze.__Value.Edge, ddlog.__analyze.Edge.createEdge(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, from.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, from.abs().toByteArray())), ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, to.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, to.abs().toByteArray()))));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_Edge(java.math.BigInteger from, java.math.BigInteger to)
    {
        int cmd = ddlog.__analyze.__Command.create__Command(fbbuilder, (byte)0, -1, 0, ddlog.__analyze.__Value.Edge, ddlog.__analyze.Edge.createEdge(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, from.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, from.abs().toByteArray())), ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, to.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, to.abs().toByteArray()))));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_Node(java.math.BigInteger id, String label, String name, String filename, boolean overrided, boolean invoke_call, boolean call_call, boolean offset_get, boolean current_call, boolean to_strings, boolean get_set_call, boolean arb_obj_instance, boolean vuln)
    {
        int cmd = ddlog.__analyze.__Command.create__Command(fbbuilder, (byte)0, 1, 2, ddlog.__analyze.__Value.Node, ddlog.__analyze.Node.createNode(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, id.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, id.abs().toByteArray())), fbbuilder.createString(label), fbbuilder.createString(name), fbbuilder.createString(filename), overrided, invoke_call, call_call, offset_get, current_call, to_strings, get_set_call, arb_obj_instance, vuln));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_Node(java.math.BigInteger id, String label, String name, String filename, boolean overrided, boolean invoke_call, boolean call_call, boolean offset_get, boolean current_call, boolean to_strings, boolean get_set_call, boolean arb_obj_instance, boolean vuln)
    {
        int cmd = ddlog.__analyze.__Command.create__Command(fbbuilder, (byte)0, -1, 2, ddlog.__analyze.__Value.Node, ddlog.__analyze.Node.createNode(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, id.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, id.abs().toByteArray())), fbbuilder.createString(label), fbbuilder.createString(name), fbbuilder.createString(filename), overrided, invoke_call, call_call, offset_get, current_call, to_strings, get_set_call, arb_obj_instance, vuln));
        this.commands.add(Integer.valueOf(cmd));
    }
    
}