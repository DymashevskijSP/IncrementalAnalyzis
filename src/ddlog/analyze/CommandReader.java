// Automatically generated by the DDlog compiler.
package ddlog.analyze;
import com.google.flatbuffers.*;
import ddlogapi.DDlogCommand;
public final class CommandReader implements DDlogCommand<Object>
{
    protected CommandReader (ddlog.__analyze.__Command inner) { this.inner = inner; }
    private ddlog.__analyze.__Command inner;
    public final Kind kind(){
        if (this.inner.weight() > 0) {
            return DDlogCommand.Kind.Insert;
        } else {
            return DDlogCommand.Kind.DeleteVal;
        }
    }
    public final long weight() { return java.lang.Math.abs((long)this.inner.weight()); }
    public final int relid() { return (int)this.inner.relid(); }
    public final Object toModify() { return null; }
    public final Object value() {
        switch (this.relid()) {
            case 0: {
                ddlog.__analyze.Edge val = (ddlog.__analyze.Edge)this.inner.val(new ddlog.__analyze.Edge());
                return (Object) new EdgeReader(val);
            }
            case 1: {
                ddlog.__analyze.Next val = (ddlog.__analyze.Next)this.inner.val(new ddlog.__analyze.Next());
                return (Object) new NextReader(val);
            }
            case 2: {
                ddlog.__analyze.Node val = (ddlog.__analyze.Node)this.inner.val(new ddlog.__analyze.Node());
                return (Object) new NodeReader(val);
            }
            default: throw new IllegalArgumentException("Invalid relation id" + this.relid());
        }
    }
}