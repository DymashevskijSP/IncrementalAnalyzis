// Automatically generated by the DDlog compiler.
package ddlog.analyze;
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogException;
import com.google.flatbuffers.*;
public class analyzeFlatBufferBuilder
{
    protected FlatBufferBuilder fbbuilder;
    public analyzeFlatBufferBuilder() {
        fbbuilder = new FlatBufferBuilder();
    }
    public analyzeFlatBufferBuilder(FlatBufferBuilder fbbuilder) {
        this.fbbuilder = fbbuilder;
    }
    public EdgeWriter create_Edge(java.math.BigInteger from, java.math.BigInteger to)
    {
        return new EdgeWriter(ddlog.__analyze.Edge.createEdge(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, from.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, from.abs().toByteArray())), ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, to.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, to.abs().toByteArray()))));
    }
    public NextWriter create_Next(java.math.BigInteger v, java.math.BigInteger nxt)
    {
        return new NextWriter(ddlog.__analyze.Next.createNext(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, v.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, v.abs().toByteArray())), ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, nxt.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, nxt.abs().toByteArray()))));
    }
    public NodeWriter create_Node(java.math.BigInteger id, String label, String name, String filename, boolean overrided, boolean invoke_call, boolean call_call, boolean offset_get, boolean current_call, boolean to_strings, boolean get_set_call, boolean arb_obj_instance, boolean vuln)
    {
        return new NodeWriter(ddlog.__analyze.Node.createNode(fbbuilder, ddlog.__analyze.__BigInt.create__BigInt(fbbuilder, id.signum() < 0 ? false : true, ddlog.__analyze.__BigInt.createBytesVector(fbbuilder, id.abs().toByteArray())), fbbuilder.createString(label), fbbuilder.createString(name), fbbuilder.createString(filename), overrided, invoke_call, call_call, offset_get, current_call, to_strings, get_set_call, arb_obj_instance, vuln));
    }
    public Tuple0Writer create_Tuple0()
    {
        return new Tuple0Writer(((java.util.function.Supplier<Integer>) (() -> 
                                {
                                    ddlog.__analyze.Tuple0.startTuple0(fbbuilder);
                                    return Integer.valueOf( ddlog.__analyze.Tuple0.endTuple0(fbbuilder));
                                })).get());
    }
}