// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__analyze;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Node extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Node getRootAsNode(ByteBuffer _bb) { return getRootAsNode(_bb, new Node()); }
  public static Node getRootAsNode(ByteBuffer _bb, Node obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__analyze.__BigInt id() { return id(new ddlog.__analyze.__BigInt()); }
  public ddlog.__analyze.__BigInt id(ddlog.__analyze.__BigInt obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String label() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer labelAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer labelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String filename() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public boolean overrided() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean invokeCall() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean callCall() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean offsetGet() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean currentCall() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean toStrings() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean getSetCall() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean arbObjInstance() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean vuln() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createNode(FlatBufferBuilder builder,
      int idOffset,
      int labelOffset,
      int nameOffset,
      int filenameOffset,
      boolean overrided,
      boolean invoke_call,
      boolean call_call,
      boolean offset_get,
      boolean current_call,
      boolean to_strings,
      boolean get_set_call,
      boolean arb_obj_instance,
      boolean vuln) {
    builder.startTable(13);
    Node.addFilename(builder, filenameOffset);
    Node.addName(builder, nameOffset);
    Node.addLabel(builder, labelOffset);
    Node.addId(builder, idOffset);
    Node.addVuln(builder, vuln);
    Node.addArbObjInstance(builder, arb_obj_instance);
    Node.addGetSetCall(builder, get_set_call);
    Node.addToStrings(builder, to_strings);
    Node.addCurrentCall(builder, current_call);
    Node.addOffsetGet(builder, offset_get);
    Node.addCallCall(builder, call_call);
    Node.addInvokeCall(builder, invoke_call);
    Node.addOverrided(builder, overrided);
    return Node.endNode(builder);
  }

  public static void startNode(FlatBufferBuilder builder) { builder.startTable(13); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addLabel(FlatBufferBuilder builder, int labelOffset) { builder.addOffset(1, labelOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(3, filenameOffset, 0); }
  public static void addOverrided(FlatBufferBuilder builder, boolean overrided) { builder.addBoolean(4, overrided, false); }
  public static void addInvokeCall(FlatBufferBuilder builder, boolean invokeCall) { builder.addBoolean(5, invokeCall, false); }
  public static void addCallCall(FlatBufferBuilder builder, boolean callCall) { builder.addBoolean(6, callCall, false); }
  public static void addOffsetGet(FlatBufferBuilder builder, boolean offsetGet) { builder.addBoolean(7, offsetGet, false); }
  public static void addCurrentCall(FlatBufferBuilder builder, boolean currentCall) { builder.addBoolean(8, currentCall, false); }
  public static void addToStrings(FlatBufferBuilder builder, boolean toStrings) { builder.addBoolean(9, toStrings, false); }
  public static void addGetSetCall(FlatBufferBuilder builder, boolean getSetCall) { builder.addBoolean(10, getSetCall, false); }
  public static void addArbObjInstance(FlatBufferBuilder builder, boolean arbObjInstance) { builder.addBoolean(11, arbObjInstance, false); }
  public static void addVuln(FlatBufferBuilder builder, boolean vuln) { builder.addBoolean(12, vuln, false); }
  public static int endNode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Node get(int j) { return get(new Node(), j); }
    public Node get(Node obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

