// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__analyze;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Edge extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Edge getRootAsEdge(ByteBuffer _bb) { return getRootAsEdge(_bb, new Edge()); }
  public static Edge getRootAsEdge(ByteBuffer _bb, Edge obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Edge __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__analyze.__BigInt from() { return from(new ddlog.__analyze.__BigInt()); }
  public ddlog.__analyze.__BigInt from(ddlog.__analyze.__BigInt obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ddlog.__analyze.__BigInt to() { return to(new ddlog.__analyze.__BigInt()); }
  public ddlog.__analyze.__BigInt to(ddlog.__analyze.__BigInt obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createEdge(FlatBufferBuilder builder,
      int fromOffset,
      int toOffset) {
    builder.startTable(2);
    Edge.addTo(builder, toOffset);
    Edge.addFrom(builder, fromOffset);
    return Edge.endEdge(builder);
  }

  public static void startEdge(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFrom(FlatBufferBuilder builder, int fromOffset) { builder.addOffset(0, fromOffset, 0); }
  public static void addTo(FlatBufferBuilder builder, int toOffset) { builder.addOffset(1, toOffset, 0); }
  public static int endEdge(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Edge get(int j) { return get(new Edge(), j); }
    public Edge get(Edge obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

